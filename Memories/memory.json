{"type":"entity","name":"DatabaseMigration Project","entityType":"dotnet_project","observations":["Console application for running database migrations","Uses Generic Host pattern with Microsoft.Extensions.Hosting","References Infrastructure project for database access","Implements AddDatabase extension from Infrastructure","Configured with appsettings.json for connection strings","Uses OrderDbContext for Entity Framework migrations","Includes proper logging and error handling"]}
{"type":"entity","name":"Infrastructure Extensions","entityType":"service_extensions","observations":["Contains InfrastructureServiceExtensions class","Provides AddDatabase method for database context registration","Provides AddInfrastructure method for full infrastructure setup","Uses PostgreSQL with Npgsql provider","Default connection string targets localhost:5051","Includes repository registrations and Temporal client setup"]}
{"type":"entity","name":"InitialOrderUseCase","entityType":"UseCase","observations":["Created in Application/UseCases directory","Implements initial order creation use case pattern","Depends on OrderService to execute business logic","Has ExecuteAsync method that takes InitialOrderRequest and returns InitialOrderResponse","Registered as scoped service in ApplicationServiceExtensions"]}
{"type":"entity","name":"UseCases Architecture Pattern","entityType":"Architecture","observations":["Added UseCases directory to Application layer","Implements Clean Architecture use case pattern","Separates application logic from domain services","Use cases orchestrate domain services and repositories"]}
{"type":"entity","entityType":"Workflow","name":"OrderProcessingWorkflow","observations":["Implemented in Workflow/Workflows/OrderProcessingWorkflow.cs","Main Temporal workflow that receives orderId as input","Orchestrates 7 sequential activities for order processing","Uses Temporal.io framework with proper attributes","Returns string result indicating success or failure","All activity calls include 5-minute timeout","Marked as TODO - placeholder implementation"]}
{"type":"entity","entityType":"Activities","name":"OrderActivities","observations":["Implemented in Workflow/Activities/OrderActivities.cs","Contains 7 Temporal activities marked with [Activity] attribute","All activities are TODO placeholders with minimal implementation","Activities: StartOrderWorkflow, ReserveStock, BurnLoyaltyTransaction, EarnLoyaltyTransaction, ProcessPayment, CompletedCart, GetOrderDetail","Each activity logs TODO message and returns placeholder result","Uses proper Temporal.io activity patterns"]}
{"type":"entity","name":"Order Entity Navigation Properties","entityType":"Feature Implementation","observations":["Added ICollection<OrderLoyalty> LoyaltyTransactions navigation property for 1-to-many relationship","Added ICollection<OrderStock> StockReservations navigation property for 1-to-many relationship","Added OrderPayment? Payment navigation property for 1-to-1 relationship","Navigation properties are virtual to support Entity Framework lazy loading","Properties are initialized with empty collections for collections","Added virtual Order navigation property to OrderLoyalty entity for bidirectional relationship","Added virtual Order navigation property to OrderStock entity for bidirectional relationship","Added virtual Order navigation property to OrderPayment entity for bidirectional relationship","All navigation properties are virtual to support Entity Framework lazy loading","Navigation properties initialized with null! to satisfy non-nullable reference types"]}
{"type":"entity","name":"OrderConfiguration Enhancement","entityType":"Infrastructure Configuration","observations":["Updated OrderConfiguration in Infrastructure layer to configure entity relationships","Added HasMany().WithOne() configuration for LoyaltyTransactions with cascade delete","Added HasMany().WithOne() configuration for StockReservations with cascade delete","Added HasOne().WithOne() configuration for Payment with cascade delete","Used proper foreign key configuration with HasForeignKey methods","Updated OrderConfiguration to use WithOne(entity => entity.Order) for all relationships","Configured bidirectional navigation for OrderLoyalty.Order relationship","Configured bidirectional navigation for OrderStock.Order relationship","Configured bidirectional navigation for OrderPayment.Order relationship","Maintains proper foreign key configuration and cascade delete behavior"]}
{"type":"entity","name":"Repository Enhancement","entityType":"Repository Pattern","observations":["Added GetByIdWithDetailsAsync method to IOrderRepository interface","Added GetByReferenceIdWithDetailsAsync method to IOrderRepository interface","Implemented both methods in OrderRepository with Entity Framework Include statements","Include statements load Payment, LoyaltyTransactions, and StockReservations","Methods provide efficient eager loading of related entities"]}
{"type":"entity","name":"DTO Enhancement","entityType":"Data Transfer Objects","observations":["Created DetailedOrderDto for comprehensive order information","Added OrderPaymentDto, LoyaltyTransactionDto, and StockReservationDto","Created static factory methods FromOrder for mapping domain entities to DTOs","DTOs include all relevant fields from related entities","Supports null handling for optional relationships"]}
{"type":"entity","name":"Service Layer Enhancement","entityType":"Application Service","observations":["Added GetOrderWithDetailsAsync method to OrderService","Added GetOrderWithDetailsByReferenceIdAsync method to OrderService","Methods utilize new repository methods with navigation properties","Proper null checking and error handling implemented","Returns DetailedOrderDto with all related entity information"]}
{"type":"entity","name":"API Enhancement","entityType":"REST API","observations":["Added GET /api/orders/{orderId}/details endpoint","Added GET /api/orders/reference/{referenceId}/details endpoint","Endpoints return DetailedOrderDto with comprehensive order information","Proper HTTP status codes and error handling implemented","Updated Api.http with test requests for new endpoints"]}
{"type":"entity","entityType":"Documentation","name":"Navigation Properties Documentation","observations":["Created comprehensive documentation in NavigationPropertiesTest.md","Explains bidirectional relationships and their benefits","Provides code examples for using navigation properties","Documents API endpoints for detailed order retrieval","Explains Entity Framework configuration and database schema implications"]}
{"type":"relation","from":"DatabaseMigration Project","to":"Infrastructure Extensions","relationType":"references"}
{"type":"relation","from":"DatabaseMigration Project","to":"Infrastructure Extensions","relationType":"uses AddDatabase method"}
{"type":"relation","from":"InitialOrderUseCase","to":"OrderService","relationType":"depends on"}
{"type":"relation","from":"OrdersController","to":"InitialOrderUseCase","relationType":"uses"}
{"type":"relation","from":"ApplicationServiceExtensions","to":"InitialOrderUseCase","relationType":"registers"}
{"type":"relation","from":"OrderProcessingWorkflow","relationType":"orchestrates","to":"OrderActivities"}
{"type":"relation","from":"OrderProcessingWorkflow","relationType":"receives","to":"orderId"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"StartOrderWorkflow"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"ReserveStock"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"BurnLoyaltyTransaction"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"EarnLoyaltyTransaction"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"ProcessPayment"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"CompletedCart"}
{"type":"relation","from":"OrderActivities","relationType":"implements","to":"GetOrderDetail"}